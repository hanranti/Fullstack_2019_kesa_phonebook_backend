{"version":3,"sources":["components/Numbers.js","components/Filter.js","components/AddOrEditPersonForm.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["DeletePersonButton","_ref","deletePerson","person","react_default","a","createElement","onClick","deletedPerson","Number","_ref2","name","number","Numbers_DeletePersonButton","Numbers","props","persons","filter","toUpperCase","includes","filterName","map","Numbers_Number","key","id","Filter","value","onChange","handleFilterNameChange","AddOrEditPersonForm","onSubmit","addOrEditPerson","newName","handleNameChange","newNumber","handleNumberChange","type","Notification","notificationMessage","className","baseURL","services_persons","axios","get","then","response","data","post","delete","concat","put","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setFilterName","_useState9","_useState10","setNotificationMessage","_useState11","_useState12","notificationClass","setNotificationClass","useEffect","personService","console","log","catch","err","timedNotification","addPerson","editPerson","editedPerson","window","confirm","error","message","setTimeout","components_Notification","components_Filter","event","target","components_AddOrEditPersonForm","preventDefault","undefined","components_Numbers","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0bfda76c.chunk.js","sourcesContent":["import React from 'react'\n\nconst DeletePersonButton = ({ deletePerson, person }) => (\n    <button onClick={() => deletePerson({ deletedPerson: person })}>delete</button>\n)\n\nconst Number = ({ deletePerson, person }) => (\n    <li>{person.name} {person.number} <DeletePersonButton deletePerson={deletePerson} person={person} /></li>\n)\n\nconst Numbers = (props) => {\n    return (\n        <div>\n            <h2>Numbers</h2>\n            <div>\n                <ul>\n                    {props.persons.filter(person => person.name.toUpperCase().includes(props.filterName.toUpperCase())\n                    ).map(person => (<Number deletePerson={props.deletePerson} key={person.id} person={person} />))}\n                </ul>\n            </div>\n        </div>\n    )\n}\nexport default Numbers","import React from 'react'\n\nconst Filter = (props) => (\n    <div>\n        filter shown with:\n      <input\n            value={props.filterName}\n            onChange={props.handleFilterNameChange}\n        />\n    </div>\n)\n\nexport default Filter","import React from 'react'\n\nconst AddOrEditPersonForm = (props) => (\n    <form onSubmit={props.addOrEditPerson}>\n        <h2>add a new</h2>\n        <div>\n            name:\n          <input\n                value={props.newName}\n                onChange={props.handleNameChange}\n            />\n        </div>\n        <div>\n            phonenumber:\n          <input\n                value={props.newNumber}\n                onChange={props.handleNumberChange}\n            />\n        </div>\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n    </form>\n)\n\nexport default AddOrEditPersonForm","import React from 'react'\n\nconst Notification = ({ notificationMessage, className }) => (\n    <div className={\"notification \" + className}>\n        <h3>{notificationMessage}</h3>\n    </div >\n)\n\nexport default Notification","import axios from 'axios'\n\nconst baseURL = \"/api/persons\"\n\nconst getAll = () => axios.get(baseURL).then(response => response.data)\n\nconst addPerson = (person) => axios.post(baseURL, person).then(response => response.data)\n\nconst deletePerson = (id) => axios.delete(`${baseURL}/${id}`).then(response => response.data)\n\nconst editPerson = (person, id) => axios.put(`${baseURL}/${id}`, person).then(response => response.data)\n\nexport default { getAll, addPerson, deletePerson, editPerson }","import React, { useState, useEffect } from 'react'\n\nimport Numbers from './components/Numbers'\nimport Filter from './components/Filter';\nimport AddOrEditPersonForm from './components/AddOrEditPersonForm';\nimport Notification from './components/Notification'\n\nimport personService from './services/persons'\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filterName, setFilterName] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState('')\n  const [notificationClass, setNotificationClass] = useState('')\n  const success = 'success'\n  const neutral = 'neutral'\n  const error = 'error'\n\n  useEffect(() => {\n    personService.getAll().then(response => {\n      console.log(response)\n      setPersons(persons.concat(response))\n    }).catch(err => {\n      timedNotification(\"Something went wrong!\", error)\n      console.log(err)\n    })\n  }, [])\n\n  const addOrEditPerson = (event) => {\n    event.preventDefault()\n    const editedPerson = persons.filter(person => person.name === newName)[0]\n\n    switch (editedPerson) {\n      case undefined:\n        addPerson(newName, newNumber)\n        break\n      default:\n        editPerson(newName, newNumber, editedPerson)\n        break\n    }\n  }\n\n  const addPerson = (name, number) =>\n    personService.addPerson({ name: name, number: number }).then(response => {\n      setPersons(persons.concat(response))\n      setNewName('')\n      setNewNumber('')\n      timedNotification(`Added ${name}!`, success)\n    }).catch(err => timedNotification(\"Something went wrong!\", error))\n\n  const editPerson = (name, number, editedPerson) =>\n    window.confirm(`${name} is already added to the phonebook, replace the old number with a new one?`)\n      ? personService.editPerson({ name: name, number: number }, editedPerson.id).then(response =>\n        setPersons(persons.map(person => person.id !== editedPerson.id ? person : response)))\n        .then(response => timedNotification(`Edited number of ${name}`, success))\n        .catch(error => {\n          personService.getAll().then(response => {\n            setPersons(response)\n          }).catch(err => timedNotification(\"Something went wrong!\", error))\n          timedNotification(`Person named ${name} was removed from server recently!`, error)\n        })\n      : timedNotification(`Cancelled editing ${name}!`, neutral)\n\n  const deletePerson = ({ deletedPerson }) => {\n    window.confirm(`Delete ${deletedPerson.name}`)\n      ? personService.deletePerson(deletedPerson.id).then(response =>\n        setPersons(persons.filter(person => person.id !== deletedPerson.id)))\n        .then(timedNotification(`Deleted ${deletedPerson.name}!`, success)).catch(err =>\n          timedNotification(\"That person was already deleted!\", error))\n      : timedNotification(`Cancelled deleting ${deletedPerson.name}!`, neutral)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterNameChange = (event) => {\n    setFilterName(event.target.value)\n  }\n\n  const timedNotification = (message, className) => {\n    setNotificationMessage(message)\n    setNotificationClass(className)\n    setTimeout(() => {\n      setNotificationMessage('')\n      setNotificationClass('')\n    }, 10000)\n  }\n\n  return (\n    <div>\n      {notificationMessage !== ''\n        ? <Notification notificationMessage={notificationMessage} className={notificationClass} />\n        : <div></div>}\n      <h2>Phonebook</h2>\n      <Filter filterName={filterName} handleFilterNameChange={handleFilterNameChange} />\n      <AddOrEditPersonForm\n        addOrEditPerson={addOrEditPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange} />\n      <Numbers persons={persons} filterName={filterName} deletePerson={deletePerson} />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}